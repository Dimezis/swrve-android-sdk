apply plugin: 'com.android.library'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    publishNonDefault true // Needed to instruct the SDK build of a particular flavor

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22
    }

    sourceSets {
        main.setRoot('src/main')
        androidTest.setRoot('src/test')
    }

    buildTypes {
        release {}
        debug {}
    }

    productFlavors {
        vanilla {}
        google {}
    }

    lintOptions {
        abortOnError true
    }
}

dependencies {
    compile 'com.google.code.gson:gson:2.2.+'
    compile 'com.android.support:support-v4:22.2.+'
    compile 'com.android.support:appcompat-v7:22.2.+'
    googleCompile 'com.google.android.gms:play-services:6.+'
}



apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'com.swrve.sdk.android'
def sdkVersion = '4.1.0'
publishing {
    publications {
        vanilla(MavenPublication) {
            artifactId "swrve"
            groupId group
            version sdkVersion
            artifacts = [androidJavadocsJar, androidSourcesJar, "$buildDir/outputs/aar/${project.name}-vanilla-release.aar"]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                configurations.vanillaCompile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        google(MavenPublication) {
            artifactId "swrve-google"
            groupId group
            version sdkVersion
            artifacts = [androidJavadocsJar, androidSourcesJar, "$buildDir/outputs/aar/${project.name}-google-release.aar"]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                configurations.googleCompile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }

    repositories {
        maven {
            url '../repo/releases'
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    excludes = ["**/README.md"]
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'source'
    from android.sourceSets.main.java.srcDirs
}