apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.1'

    publishNonDefault true // Needed to instruct the SDK build of a particular flavor

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
    }

    buildTypes {
        release {}
        debug {}
    }

    productFlavors {
        core {}
        google {}
        coreplot {}
        googleplot {}
    }

    sourceSets{
/**
 *       // Documentation can be scarce for gradle source sets. These are the different configuration option styles
 *       manifest.srcFile 'AndroidManifest.xml' // generally ill advise to use this as theres no need to specify manifest
 *       java.srcDirs = ['src/commonFiles/java']
 *       resources.srcDirs = ['src/commonFiles/java']
 *       aidl.srcDirs = ['src/commonFiles/java']
 *       renderscript.srcDirs = ['src/commonFiles/java']
 *       res.srcDirs = ['res']
 *       assets.srcDirs = ['assets']
 */
        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        coreplot {
            java.srcDirs = ["src/main/java", "src/core/java", "src/coreplot/java"]
            res.srcDirs = ["src/main/res", "src/core/res", "src/coreplot/res"]
        }
        googleplot {
            java.srcDirs = ["src/main/java", "src/google/java", "src/googleplot/java"]
            res.srcDirs = ["src/main/res", "src/google/res", "src/googleplot/res"]
        }
    }

    lintOptions {
        abortOnError true
    }
}

dependencies {

    compile 'com.google.code.gson:gson:2.2.+'
    compile 'com.android.support:support-v4:23.+'
    compile 'com.android.support:appcompat-v7:23.+'
    googleCompile 'com.google.android.gms:play-services-gcm:7.+'

    googleplotCompile fileTree(dir: 'libs', include: ['*.jar'])
    coreplotCompile fileTree(dir: 'libs', include: ['*.jar'])
}

apply plugin: 'maven-publish'
apply plugin: 'signing'


publishing {
    publications {
        core(MavenPublication) {
            artifactId swrveCoreArtifactId
            groupId swrveGroupId
            version swrveSdkVersion
            artifacts = [androidSourcesJar, "$buildDir/outputs/aar/${project.name}-core-release.aar"]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }

                configurations.coreCompile.allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
        google(MavenPublication) {
            artifactId swrveGoogleArtifactId
            groupId swrveGroupId
            version swrveSdkVersion
            artifacts = [androidSourcesJar, "$buildDir/outputs/aar/${project.name}-google-release.aar"]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }

                configurations.googleCompile.allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    excludes = ["**/README.md"]
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'source'
    from android.sourceSets.main.java.srcDirs
}
